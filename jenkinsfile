pipeline {
    agent any

    environment {
        AWS_DOCKER_REGISTRY = '924917172028.dkr.ecr.us-east-2.amazonaws.com'
        // your ECR repository name
        APP_NAME = 'my_new_image'
        AWS_DEFAULT_REGION = 'us-east-2'
    }

    // environment {
    //     NETLIFY_SITE_ID = '2bc5c8aa-6350-47bc-898a-076b67098e1b'
    //     NETLIFY_AUTH_TOKEN = credentials('my-react-token')
    // }

    stages {
        // stage('Docker'){
        //     steps{
        //         sh 'docker build -t my-docker-image .'
        //     }
        // }

        stage('Build') {
            agent {
                docker { 
                    image 'node:22.13.1-alpine' 
                    reuseNode true
                }
            }
            steps {
                sh '''
                    ls -la
                    node --version
                    npm --version
                    npm install
                    npm run build
                    ls -la
                '''
            }
        }

        stage('Test') {
            agent {
                docker { 
                    image 'node:22.13.1-alpine' 
                    reuseNode true
                }
            }
            steps {
                sh '''
                    test -f build/index.html
                    npm test
                '''
            }
        }

        // stage('Deploy') {
        //     agent {
        //         docker { 
        //            // image 'node:22.13.1-alpine'
        //             image 'my-docker-image' 
        //             reuseNode true
        //         }
        //     }
        //     steps {
        //         sh '''
        //             # npm install netlify-cli
        //             # node_modules/.bin/netlify --version
        //             # echo "Deploying to Site ID: $NETLIFY_SITE_ID"
        //             # node_modules/.bin/netlify status
        //             # node_modules/.bin/netlify deploy --prod --dir=build


        //             ###### custom docker image
        //             netlify --version
        //             echo "Deploying to Site ID: $NETLIFY_SITE_ID"
        //             netlify status
        //             netlify deploy --prod --dir=build
        //         '''
        //     }
        // }

        // stage("AWS") {
        //     agent {
        //         docker { 
        //             image 'amazon/aws-cli' 
        //             reuseNode true
        //             args '--entrypoint=""'
        //         }
        //     }

        //     environment{
        //         AWS_S3_BUCKET = 'my-new-03202025'
        //     }

        //     steps {

        //         withCredentials([usernamePassword(credentialsId: 'my-temp', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {
        //         // some block
        //         sh '''
        //             aws --version
        //             aws s3 ls
        //             echo "Hello S3!"> index.html
        //             # aws s3 cp index.html s3://my-new-03202025/index.html
        //             aws s3 sync build s3://$AWS_S3_BUCKET
        //         '''
        //         }
        //     }
        // }

        stage('Build My Docker Image'){

            agent{
                docker{
                    image 'amazon/aws-cli'
                    reuseNode true
                    args '-u root -v /var/run/docker.sock:/var/run/docker.sock --entrypoint=""'
                }
            }
            steps{
                withCredentials([usernamePassword(credentialsId: 'my-temp', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {
                    
                    sh '''
                        amazon-linux-extras install docker
                        docker build -t $AWS_DOCKER_REGISTRY/$APP_NAME .
                        aws ecr get-login-password | docker login --username AWS --password-stdin $AWS_DOCKER_REGISTRY
                        docker push $AWS_DOCKER_REGISTRY/$APP_NAME:latest
                    '''
                }
            }
        }


        stage("Deploy to AWS") {
            agent {
                docker { 
                    image 'amazon/aws-cli' 
                    reuseNode true
                    //args '--entrypoint=""'

                    // login as root, so that we could install jq
                     args '-u root --entrypoint=""'
                }
            }


            steps {

                withCredentials([usernamePassword(credentialsId: 'my-temp', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {
                // some block
                sh '''
                    aws --version

                   # aws ecs register-task-definition --cli-input-json file://aws/task-definition.json
                    yum install jq -y
                    LATEST_TD_REVISION=$(aws ecs register-task-definition --cli-input-json file://aws/task-definition.json | jq '.taskDefinition.revision')

                    # aws ecs update-service --cluster my-react-cluster-03252025 --service Temp-TaskDefinition-Prod-Service
                    aws ecs update-service --cluster my-react-cluster-03252025 --service Temp-TaskDefinition-Prod-Service --task-definition Temp-TaskDefinition-Prod:$LATEST_TD_REVISION

                '''
                }
            }
        }
    

    }
}